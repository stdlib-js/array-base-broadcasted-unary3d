{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport broadcastArray from '@stdlib/array-base-broadcast-array';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a broadcasted nested input array and assigns results to elements in a three-dimensional nested output array.\n*\n* @param {ArrayLikeObject<Array<Collection>>} arrays - array-like object containing one input nested array and one output nested array\n* @param {ArrayLikeObject<NonNegativeIntegerArray>} shapes - array shapes\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import ones3d from '@stdlib/array-base-ones3d';\n* import zeros3d from '@stdlib/array-base-zeros3d';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* var shapes = [\n*     [ 1, 1, 2 ],\n*     [ 1, 2, 2 ]\n* ];\n*\n* var x = ones3d( shapes[ 0 ] );\n* var y = zeros3d( shapes[ 1 ] );\n*\n* bunary3d( [ x, y ], shapes, scale );\n*\n* console.log( y );\n* // => [ [ [ 10.0, 10.0 ], [ 10.0, 10.0 ] ] ]\n*/\nfunction bunary3d( arrays, shapes, fcn ) {\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar x0;\n\tvar x1;\n\tvar y0;\n\tvar y1;\n\tvar sh;\n\tvar st;\n\tvar o;\n\tvar x;\n\tvar y;\n\n\tsh = shapes[ 1 ];\n\tS0 = sh[ 2 ];\n\tS1 = sh[ 1 ];\n\tS2 = sh[ 0 ];\n\tif ( S0 <= 0 || S1 <= 0 || S2 <= 0 ) {\n\t\treturn;\n\t}\n\to = broadcastArray( arrays[ 0 ], shapes[ 0 ], sh );\n\tx = o.data;\n\tst = o.strides;\n\tdx0 = st[ 2 ];\n\tdx1 = st[ 1 ];\n\tdx2 = st[ 0 ];\n\n\ty = arrays[ 1 ];\n\tj2 = 0;\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tj1 = 0;\n\t\tx1 = x[ j2 ];\n\t\ty1 = y[ i2 ];\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tj0 = 0;\n\t\t\tx0 = x1[ j1 ];\n\t\t\ty0 = y1[ i1 ];\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\ty0[ i0 ] = fcn( x0[ j0 ] );\n\t\t\t\tj0 += dx0;\n\t\t\t}\n\t\t\tj1 += dx1;\n\t\t}\n\t\tj2 += dx2;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default bunary3d;\n"],"names":["bunary3d","arrays","shapes","fcn","dx0","dx1","dx2","S0","S1","S2","i0","i1","i2","j0","j1","j2","x0","x1","y0","y1","sh","st","o","x","y","broadcastArray","data","strides"],"mappings":";;8FAwDA,SAASA,EAAUC,EAAQC,EAAQC,GAClC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAMJ,GAHAjB,GADAa,EAAKlB,EAAQ,IACJ,GACTM,EAAKY,EAAI,GACTX,EAAKW,EAAI,KACJb,GAAM,GAAKC,GAAM,GAAKC,GAAM,GAYjC,IARAc,GADAD,EAAIG,EAAgBxB,EAAQ,GAAKC,EAAQ,GAAKkB,IACxCM,KAENtB,GADAiB,EAAKC,EAAEK,SACG,GACVtB,EAAMgB,EAAI,GACVf,EAAMe,EAAI,GAEVG,EAAIvB,EAAQ,GACZc,EAAK,EACCH,EAAK,EAAGA,EAAKH,EAAIG,IAAO,CAI7B,IAHAE,EAAK,EACLG,EAAKM,EAAGR,GACRI,EAAKK,EAAGZ,GACFD,EAAK,EAAGA,EAAKH,EAAIG,IAAO,CAI7B,IAHAE,EAAK,EACLG,EAAKC,EAAIH,GACTI,EAAKC,EAAIR,GACHD,EAAK,EAAGA,EAAKH,EAAIG,IACtBQ,EAAIR,GAAOP,EAAKa,EAAIH,IACpBA,GAAMT,EAEPU,GAAMT,CACN,CACDU,GAAMT,CACN,CACF"}